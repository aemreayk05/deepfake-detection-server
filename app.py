from flask import Flask, request, jsonify
from flask_cors import CORS
import base64
import io
import numpy as np
from PIL import Image
import torch
from transformers import ViTImageProcessor, ViTForImageClassification
import logging
import os
from datetime import datetime

app = Flask(__name__)
CORS(app)

# Logging ayarlarƒ±
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global deƒüi≈ükenler
model = None
processor = None

def load_model():
    """Deepfake detection modelini y√ºkle"""
    global model, processor
    try:
        logger.info("ü§ñ Deepfake detection modeli y√ºkleniyor...")
        
        # Hugging Face modelini y√ºkle
        model_name = "dima806/deepfake_vs_real_image_detection"
        processor = ViTImageProcessor.from_pretrained(model_name)
        model = ViTForImageClassification.from_pretrained(model_name)
        
        logger.info("‚úÖ Model ba≈üarƒ±yla y√ºklendi!")
        return True
    except Exception as e:
        logger.error(f"‚ùå Model y√ºkleme hatasƒ±: {e}")
        return False

def preprocess_image(image_data):
    """G√∂rseli model i√ßin hazƒ±rla"""
    try:
        # Base64'ten g√∂rseli decode et
        if isinstance(image_data, str):
            if image_data.startswith('data:image'):
                # data:image/jpeg;base64, formatƒ±ndan base64 kƒ±smƒ±nƒ± al
                image_data = image_data.split(',')[1]
            image_bytes = base64.b64decode(image_data)
        else:
            image_bytes = image_data
        
        # PIL Image'e √ßevir
        image = Image.open(io.BytesIO(image_bytes))
        
        # RGB'ye √ßevir (RGBA ise)
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Model i√ßin hazƒ±rla
        inputs = processor(images=image, return_tensors="pt")
        
        return inputs, image
    except Exception as e:
        logger.error(f"‚ùå G√∂rsel √∂n i≈üleme hatasƒ±: {e}")
        raise e

def predict_deepfake(inputs):
    """Deepfake detection tahmini yap"""
    try:
        with torch.no_grad():
            outputs = model(**inputs)
            logits = outputs.logits
            probabilities = torch.nn.functional.softmax(logits, dim=-1)
            
            # Sonu√ßlarƒ± al
            fake_prob = probabilities[0][1].item()  # Fake olasƒ±lƒ±ƒüƒ±
            real_prob = probabilities[0][0].item()  # Real olasƒ±lƒ±ƒüƒ±
            
            # Tahmin
            prediction = "Fake" if fake_prob > real_prob else "Real"
            confidence = max(fake_prob, real_prob) * 100
            
            return {
                "prediction": prediction,
                "confidence": round(confidence, 2),
                "probabilities": {
                    "real": round(real_prob * 100, 2),
                    "fake": round(fake_prob * 100, 2)
                }
            }
    except Exception as e:
        logger.error(f"‚ùå Tahmin hatasƒ±: {e}")
        raise e

@app.route('/health', methods=['GET'])
def health_check():
    """Saƒülƒ±k kontrol√º"""
    return jsonify({
        "status": "healthy",
        "model_loaded": model is not None,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/analyze', methods=['POST'])
def analyze_image():
    """G√∂rsel analizi yap"""
    try:
        # Request verilerini al
        data = request.get_json()
        
        if not data or 'image' not in data:
            return jsonify({"error": "G√∂rsel verisi bulunamadƒ±"}), 400
        
        image_data = data['image']
        
        logger.info("üîç G√∂rsel analizi ba≈ülƒ±yor...")
        start_time = datetime.now()
        
        # G√∂rseli √∂n i≈üle
        inputs, image = preprocess_image(image_data)
        
        # Tahmin yap
        result = predict_deepfake(inputs)
        
        # ƒ∞≈ülem s√ºresini hesapla
        processing_time = (datetime.now() - start_time).total_seconds()
        
        # Sonucu formatla
        response = {
            "success": True,
            "prediction": result["prediction"],
            "confidence": result["confidence"],
            "probabilities": result["probabilities"],
            "processing_time": round(processing_time, 3),
            "model_info": {
                "name": "dima806/deepfake_vs_real_image_detection",
                "type": "ViT (Vision Transformer)",
                "description": "Deepfake vs Real Image Detection"
            },
            "timestamp": datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ Analiz tamamlandƒ±: {result['prediction']} ({result['confidence']}%)")
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"‚ùå Analiz hatasƒ±: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/model-info', methods=['GET'])
def model_info():
    """Model bilgilerini d√∂nd√ºr"""
    return jsonify({
        "model_name": "dima806/deepfake_vs_real_image_detection",
        "model_type": "ViT (Vision Transformer)",
        "description": "Deepfake vs Real Image Detection Model",
        "accuracy": "99.27%",
        "paper": "https://www.kaggle.com/code/dima806/deepfake-vs-real-faces-detection-vit",
        "huggingface": "https://huggingface.co/dima806/deepfake_vs_real_image_detection",
        "loaded": model is not None,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/', methods=['GET'])
def root():
    """Ana sayfa"""
    return jsonify({
        "service": "Deepfake Detection API",
        "version": "1.0.0",
        "endpoints": {
            "health": "/health",
            "analyze": "/analyze (POST)",
            "model_info": "/model-info"
        },
        "model": "dima806/deepfake_vs_real_image_detection",
        "status": "running"
    })

if __name__ == '__main__':
    # Modeli y√ºkle
    if load_model():
        logger.info("üöÄ Deepfake Detection Server ba≈ülatƒ±lƒ±yor...")
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
    else:
        logger.error("‚ùå Model y√ºklenemedi, server ba≈ülatƒ±lamƒ±yor!") 